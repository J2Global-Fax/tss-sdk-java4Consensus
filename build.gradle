/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('http://source.j2.com/maven2')
        allowInsecureProtocol = true
    }

    maven {
        url = uri('http://repository.j2.com/repository/maven2')
        allowInsecureProtocol = true
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

configurations {
    implementation.exclude group: 'org.slf4j' // will exclude all transitive dependencies for org.slf4j, or any other specific logger implementation
    implementation.exclude group: 'ch.qos.logback'
}
dependencies {
    implementation('org.springframework.boot:spring-boot-starter:2.7.8')
    {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    implementation 'org.springframework:spring-websocket:5.3.24'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.4.5'
    testImplementation 'com.squareup.okhttp3:okhttp:3.14.9'

    compileOnly gradleApi()
}

java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId= project.groupId
            version = project.version
            from components.java

            pom {
                name = project.name
                groupId=project.groupId
                version = project.version
                description = 'Get secrets from Thycotic Secret Server'
//                scm {
//                  //  connection = "scm:https://github.com/${repository_owner}/${repository_name}.git"
//                    //developerConnection = 'scm:git:ssh://example.com/my-library.git'
//                    //url = 'http://example.com/my-library/'
//                }
            }
        }
    }
    repositories {
        maven {
            def isSnapshot = "${project.version}".endsWith('SNAPSHOT')
            url = isSnapshot ? "${project.snapshotsRepoUrl}" : "${project.releaseRepoUrl}"
            credentials {
                username = (isSnapshot) ? project.snapshotUserName : project.releaseUserName
                password = (isSnapshot) ? project.snapshotPassword : project.releasePassword
            }
        }
    }
}

gradlePlugin {
    plugins {
        cacheDependencies  {
            id = 'consensus-secret'
            implementationClass = 'com.thycotic.secrets.server.spring.SecretPlugin'
        }
    }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }